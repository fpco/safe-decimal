name: safe-decimal-CI

on:
  push:
    branches: [ '*' ]
  pull_request:
    branches: [ master ]

defaults: { run: { shell: bash } }

jobs:
  build:
    name: CI
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        resolver: [nightly, lts-17, lts-16, lts-14, lts-12, lts-11, lts-9]
        include:
          - resolver: lts-9
            ghc: 8.0.2
            stack-yaml: stack-old.yaml
          - resolver: lts-11
            ghc: 8.2.2
            stack-yaml: stack-old.yaml
          - resolver: lts-12
            ghc: 8.4.4
          - resolver: lts-14
            ghc: 8.6.5
          - resolver: lts-16
            ghc: 8.8.4
          - resolver: lts-17
            ghc: 8.10.4

          # Latest stable for MacOS: ghc-8.8.4
          - resolver: lts-16
            os: macos-latest
          # Latest stable for Windows: ghc-8.6.4
          - resolver: lts-14
            os: windows-latest

    env:
      STACK_YAML: stack.yaml
      STACK_ARGS: '--resolver ${{ matrix.resolver }}'
      cache-version: v5 # bump up this version to invalidate currently stored cache
    steps:
    - uses: actions/checkout@v2

    - name: Cache
      id: cache
      uses: actions/cache@v2
      if: matrix.os != 'macos-latest'
      with:
        path: |
          ~/.stack
          .stack-work
        key: ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    - name: Cache
      id: cache-macos
      uses: actions/cache@v2
      if: matrix.os == 'macos-latest'
      with:
        path: |
          ~/.stack
        key: ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-${{ env.cache-version }}
    - name: Workaround setup-exe-cache failure on macos
      if: steps.cache-macos.outputs.cache-hit == 'true' && matrix.os == 'macos-latest'
      run: |
        rm -r ~/.stack/setup-exe-cache
    - name: Windows Cache
      id: cache-windows
      uses: actions/cache@v2
      if: matrix.os == 'windows-latest'
      with:
        path: |
          C:\\Users\\RUNNER~1\\AppData\\Roaming\\stack
          C:\\Users\\RUNNER~1\\AppData\\Local\\Programs\\stack
        key: ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.resolver }}-programs-${{ env.cache-version }}

    - name: Ubuntu install GHC
      if: matrix.ghc != '' && matrix.os == 'ubuntu-latest'
      run: |
        sudo add-apt-repository ppa:hvr/ghc -y
        sudo apt-get update
        sudo apt-get install ghc-${{ matrix.ghc }}
    - name: Install Stack and local GHC
      run: |
        set -ex
        curl -sSL https://get.haskellstack.org/ | sh -s - -f
        curl -sSL https://raw.githubusercontent.com/lehins/utils/786c3fe7e9e1345d7b403019f52e344627224edf/haskell/git-modtime/git-modtime.hs -o git-modtime.hs
        [ -n "${{ matrix.ghc }}" ] && [ "${{ matrix.os }}" == "ubuntu-latest" ] && STACK_ARGS="$STACK_ARGS --system-ghc"
        [ -n "${{ matrix.stack-yaml }}" ] && STACK_YAML=${{ matrix.stack-yaml }}
        stack $STACK_ARGS runghc git-modtime.hs
    - name: Tests
      env:
        COVERALLS_TOKEN: ${{ secrets.COVERALLS_TOKEN }}
      run: |
        set -ex
        [ -n "${{ matrix.ghc }}" ] && [ "${{ matrix.os }}" == "ubuntu-latest" ] && STACK_ARGS="$STACK_ARGS --system-ghc"
        [ -n "${{ matrix.stack-yaml }}" ] && STACK_YAML=${{ matrix.stack-yaml }}
        stack $STACK_ARGS test safe-decimal:tests safe-decimal:doctests --bench --no-run-benchmarks --haddock --no-haddock-deps
